package com.nexuslink.wenavi;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nexuslink.wenavi.FriendVerify;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIEND_VERIFY.
*/
public class FriendVerifyDao extends AbstractDao<FriendVerify, Long> {

    public static final String TABLENAME = "FRIEND_VERIFY";

    /**
     * Properties of entity FriendVerify.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Avatar = new Property(0, String.class, "avatar", false, "AVATAR");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Hello = new Property(2, String.class, "hello", false, "HELLO");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
    };


    public FriendVerifyDao(DaoConfig config) {
        super(config);
    }
    
    public FriendVerifyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIEND_VERIFY' (" + //
                "'AVATAR' TEXT," + // 0: avatar
                "'NICK_NAME' TEXT," + // 1: nickName
                "'HELLO' TEXT," + // 2: hello
                "'USER_NAME' TEXT," + // 3: userName
                "'_id' INTEGER PRIMARY KEY );"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND_VERIFY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendVerify entity) {
        stmt.clearBindings();
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(1, avatar);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String hello = entity.getHello();
        if (hello != null) {
            stmt.bindString(3, hello);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    /** @inheritdoc */
    @Override
    public FriendVerify readEntity(Cursor cursor, int offset) {
        FriendVerify entity = new FriendVerify( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // avatar
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hello
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FriendVerify entity, int offset) {
        entity.setAvatar(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHello(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FriendVerify entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FriendVerify entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
